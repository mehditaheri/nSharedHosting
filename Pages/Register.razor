@page "/register"
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject ILogger<Register> Logger

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<EditForm Model="@Input" method="post" OnValidSubmit="RegisterUser" FormName="register">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />

    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
        <label for="email" class="form-label">Email</label>
        <ValidationMessage For="() => Input.Email" class="text-danger" />
    </div>

    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
        <label for="password" class="form-label">Password</label>
        <ValidationMessage For="() => Input.Password" class="text-danger" />
    </div>

    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
        <label for="confirm-password" class="form-label">Confirm Password</label>
        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
    </div>

    <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
</EditForm>

<div class="mt-3">
    <p><a href="/login">Already have an account? Log in here.</a></p>
</div>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }

    public async Task RegisterUser()
    {
        var user = new ApplicationUser { UserName = Input.Email, Email = Input.Email };
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (result.Succeeded)
        {
            Logger.LogInformation("User created a new account with password.");

            await SignInManager.SignInAsync(user, isPersistent: false);
            var returnUrl = ReturnUrl ?? "/";
            NavigationManager.NavigateTo(returnUrl);
        }
        else
        {
            foreach (var error in result.Errors)
            {
                // Handle errors
            }
        }
    }
}