@page "/file-manager/{workspaceId:int}/{folderId:int}"
@inject IFolderService FolderService
@inject IFileService FileService
@inject IStorageService StorageService
@inject ICurrentUserService CurrentUserService

<PageTitle>File Manager - @folder?.Name</PageTitle>

<div class="row mb-4">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1 class="mb-0"><i class="fas fa-folder-open text-primary me-3"></i>File Manager</h1>
                @if (folder != null)
                {
                    <p class="text-muted mt-2">
                        <i class="fas fa-folder me-1"></i>@folder.Name
                        <span class="badge bg-secondary ms-2">@folder.Type</span>
                    </p>
                }
            </div>
            <a href="/workspace/@workspaceId" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-2"></i>Back to Workspace
            </a>
        </div>
    </div>
</div>

@if (folder == null)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3 text-muted">Loading folder...</p>
    </div>
}
else
{
    <div class="row">
        <div class="col-lg-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-folder-plus text-success me-2"></i>Create Subfolder</h5>
                </div>
                <div class="card-body">
                    <EditForm Model="newFolder" OnValidSubmit="CreateSubfolder">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />
                        <div class="mb-3">
                            <label class="form-label">Folder Name</label>
                            <InputText @bind-Value="newFolder.Name" class="form-control" placeholder="Enter folder name" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Folder Type</label>
                            <select @bind="newFolder.Type" class="form-select">
                                <option value="Private">Private</option>
                                <option value="Shared">Shared</option>
                                <option value="Public">Public</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-success">
                            <i class="fas fa-plus-circle me-2"></i>Create Folder
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>

        <div class="col-lg-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-upload text-primary me-2"></i>Upload File</h5>
                </div>
                <div class="card-body">
                    <InputFile OnChange="HandleFileUpload" class="form-control" />
                    <small class="text-muted mt-2 d-block">Select a file to upload to this folder</small>
                </div>
            </div>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0"><i class="fas fa-file text-info me-2"></i>Files</h5>
        </div>
        <div class="card-body">
            @if (files == null)
            {
                <div class="text-center py-3">
                    <div class="spinner-border spinner-border-sm text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2 text-muted">Loading files...</p>
                </div>
            }
            else if (!files.Any())
            {
                <p class="text-muted text-center py-3">No files in this folder.</p>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th><i class="fas fa-file me-1"></i>Name</th>
                                <th><i class="fas fa-weight me-1"></i>Size</th>
                                <th><i class="fas fa-calendar me-1"></i>Uploaded</th>
                                <th><i class="fas fa-cogs me-1"></i>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var file in files)
                            {
                                <tr>
                                    <td>
                                        <i class="fas fa-file text-secondary me-2"></i>@file.Name
                                    </td>
                                    <td>@FormatFileSize(file.Size)</td>
                                    <td>@file.CreatedAt.ToShortDateString()</td>
                                    <td>
                                        <button class="btn btn-outline-primary btn-sm me-2" @onclick="() => DownloadFile(file)">
                                            <i class="fas fa-download"></i>
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteFile(file.Id)">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>

    <div class="card">
        <div class="card-header">
            <h5 class="mb-0"><i class="fas fa-folder text-warning me-2"></i>Subfolders</h5>
        </div>
        <div class="card-body">
            @if (subfolders == null)
            {
                <div class="text-center py-3">
                    <div class="spinner-border spinner-border-sm text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2 text-muted">Loading subfolders...</p>
                </div>
            }
            else if (!subfolders.Any())
            {
                <p class="text-muted text-center py-3">No subfolders in this folder.</p>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th><i class="fas fa-folder me-1"></i>Name</th>
                                <th><i class="fas fa-tag me-1"></i>Type</th>
                                <th><i class="fas fa-calendar me-1"></i>Created</th>
                                <th><i class="fas fa-cogs me-1"></i>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var subfolder in subfolders)
                            {
                                <tr>
                                    <td>
                                        <i class="fas fa-folder text-warning me-2"></i>@subfolder.Name
                                    </td>
                                    <td>
                                        <span class="badge bg-secondary">@subfolder.Type</span>
                                    </td>
                                    <td>@subfolder.CreatedAt.ToShortDateString()</td>
                                    <td>
                                        <a href="/file-manager/@workspaceId/@subfolder.Id" class="btn btn-outline-primary btn-sm me-2">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteFolder(subfolder.Id)">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public int WorkspaceId { get; set; }
    [Parameter] public int FolderId { get; set; }

    private Folder? folder;
    private IEnumerable<SharedFile>? files;
    private IEnumerable<Folder>? subfolders;
    private Folder newFolder = new();
    private ApplicationUser currentUser;

    protected override async Task OnInitializedAsync()
    {
        currentUser = CurrentUserService.GetCurrentUser();
        folder = await FolderService.GetFolderByIdAsync(FolderId);
        if (folder != null && CanAccessFolder(folder))
        {
            files = await FileService.GetFilesByFolderAsync(FolderId);
            subfolders = await FolderService.GetSubFoldersAsync(FolderId);
        }
        else
        {
            // Redirect or show error
            folder = null;
        }
    }

    private bool CanAccessFolder(Folder folder)
    {
        if (currentUser.Role == UserRole.Admin) return true;
        if (folder.Workspace.OwnerId == currentUser.Id) return true;
        return folder.Type == FolderType.Public || folder.Type == FolderType.Shared;
    }

    private async Task CreateSubfolder()
    {
        newFolder.WorkspaceId = WorkspaceId;
        newFolder.ParentFolderId = FolderId;
        await FolderService.CreateFolderAsync(newFolder);
        newFolder = new Folder();
        subfolders = await FolderService.GetSubFoldersAsync(FolderId);
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var fileModel = new SharedFile
        {
            Name = file.Name,
            Size = file.Size,
            Extension = Path.GetExtension(file.Name),
            ContentType = file.ContentType,
            FolderId = FolderId
        };
        fileModel = await FileService.CreateFileAsync(fileModel);

        // Upload to storage
        var path = $"{WorkspaceId}/{FolderId}/{fileModel.Id}_{file.Name}";
        using var stream = file.OpenReadStream();
        await StorageService.UploadAsync(path, stream);

        files = await FileService.GetFilesByFolderAsync(FolderId);
    }

    private async Task DownloadFile(SharedFile file)
    {
        var path = $"{WorkspaceId}/{FolderId}/{file.Id}_{file.Name}";
        var stream = await StorageService.DownloadAsync(path);
        // In a real app, trigger download
        Console.WriteLine($"Downloading {file.Name}");
    }

    private async Task DeleteFile(int id)
    {
        var file = await FileService.GetFileByIdAsync(id);
        if (file != null)
        {
            var path = $"{WorkspaceId}/{FolderId}/{file.Id}_{file.Name}";
            await StorageService.DeleteAsync(path);
            await FileService.DeleteFileAsync(id);
            files = await FileService.GetFilesByFolderAsync(FolderId);
        }
    }

    private async Task DeleteFolder(int id)
    {
        await FolderService.DeleteFolderAsync(id);
        subfolders = await FolderService.GetSubFoldersAsync(FolderId);
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        int order = 0;
        double size = bytes;
        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }
        return $"{size:0.##} {sizes[order]}";
    }
}