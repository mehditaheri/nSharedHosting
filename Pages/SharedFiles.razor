@page "/shared-files"
@inject IFileService FileService
@inject IStorageService StorageService
@inject ICurrentUserService CurrentUserService

<PageTitle>Shared Files - SharedHosting</PageTitle>

<div class="row mb-4">
    <div class="col-12">
        <h1 class="mb-0"><i class="fas fa-share-alt text-success me-3"></i>Shared Files</h1>
        <p class="text-muted mt-2">Browse files shared within the organization</p>
    </div>
</div>

@if (files == null)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3 text-muted">Loading shared files...</p>
    </div>
}
else if (!files.Any())
{
    <div class="card">
        <div class="card-body text-center py-5">
            <i class="fas fa-share-alt fa-3x text-muted mb-3"></i>
            <h4 class="card-title">No shared files found</h4>
            <p class="card-text text-muted">There are no shared files available at the moment.</p>
        </div>
    </div>
}
else
{
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0"><i class="fas fa-file text-success me-2"></i>Available Files</h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th><i class="fas fa-file me-1"></i>Name</th>
                            <th><i class="fas fa-weight me-1"></i>Size</th>
                            <th><i class="fas fa-folder me-1"></i>Folder</th>
                            <th><i class="fas fa-calendar me-1"></i>Uploaded</th>
                            <th><i class="fas fa-cogs me-1"></i>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var file in files)
                        {
                            <tr>
                                <td>
                                    <i class="fas fa-file text-secondary me-2"></i>@file.Name
                                </td>
                                <td>@FormatFileSize(file.Size)</td>
                                <td>@file.Folder.Name</td>
                                <td>@file.CreatedAt.ToShortDateString()</td>
                                <td>
                                    <button class="btn btn-outline-primary btn-sm" @onclick="() => DownloadFile(file)">
                                        <i class="fas fa-download"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<SharedFile>? files;
    private ApplicationUser? currentUser;

    protected override async Task OnInitializedAsync()
    {
        currentUser = CurrentUserService.GetCurrentUser();
        if (CanAccessSharedFiles())
        {
            files = await FileService.GetFilesByFolderTypesAsync(new[] { FolderType.Shared });
        }
        else
        {
            files = new List<SharedFile>();
        }
    }

    private bool CanAccessSharedFiles()
    {
        return currentUser != null; // Guests cannot access shared
    }

    private async Task DownloadFile(SharedFile file)
    {
        var path = $"{file.Folder.WorkspaceId}/{file.FolderId}/{file.Id}_{file.Name}";
        var stream = await StorageService.DownloadAsync(path);
        // In a real app, trigger download
        Console.WriteLine($"Downloading {file.Name}");
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        int order = 0;
        double size = bytes;
        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }
        return $"{size:0.##} {sizes[order]}";
    }
}