@page "/login"
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject ILogger<Login> Logger

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>

<EditForm Model="@Input" method="post" OnValidSubmit="LoginUser" FormName="login">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />

    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
        <label for="email" class="form-label">Email</label>
        <ValidationMessage For="() => Input.Email" class="text-danger" />
    </div>

    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
        <label for="password" class="form-label">Password</label>
        <ValidationMessage For="() => Input.Password" class="text-danger" />
    </div>

    <div class="checkbox mb-3">
        <label class="form-label">
            <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
            Remember me
        </label>
    </div>

    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
</EditForm>

<div class="mt-3">
    <p><a href="/register">Don't have an account? Register here.</a></p>
</div>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            var returnUrl = ReturnUrl ?? "/";
            NavigationManager.NavigateTo(returnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            // Handle lockout
        }
        else
        {
            // Handle failure
        }
    }
}